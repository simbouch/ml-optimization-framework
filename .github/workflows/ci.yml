name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.4.2"

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort bandit safety
        pip install -r requirements.txt
    
    - name: Run Black (code formatting)
      run: black --check --diff src/ tests/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ tests/
    
    - name: Run Flake8 (linting)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (type checking)
      run: mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run Bandit (security)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (dependency security)
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
    
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-timeout
        pip install -r requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p logs results studies
    
    - name: Run unit tests
      run: |
        pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --timeout=300 \
          -m "unit and not slow" \
          --tb=short
    
    - name: Run integration tests
      run: |
        pytest tests/ -v \
          --timeout=600 \
          -m "integration" \
          --tb=short
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Framework Validation
  validate-framework:
    runs-on: ubuntu-latest
    name: Framework Validation
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run framework validation
      run: |
        python scripts/validate_framework.py
    
    - name: Run smoke tests
      run: |
        pytest tests/ -v -m "smoke" --tb=short

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ml-optimization-framework:test .
    
    - name: Test Docker image
      run: |
        docker run --rm ml-optimization-framework:test python -c "
        import sys
        sys.path.insert(0, '/home/mlopt/app')
        from src.data.data_pipeline import DataPipeline
        from src.models.random_forest_optimizer import RandomForestOptimizer
        print('âœ… Docker image working correctly')
        "
    
    - name: Test Docker Compose
      run: |
        # Create necessary directories
        mkdir -p studies results logs
        
        # Start services
        docker-compose up -d ml-optimizer optuna-dashboard
        
        # Wait for services to be ready
        sleep 30
        
        # Test Optuna Dashboard
        curl -f http://localhost:8080/api/studies || exit 1
        
        # Cleanup
        docker-compose down

  # Performance Benchmarks
  benchmark:
    runs-on: ubuntu-latest
    name: Performance Benchmarks
    needs: [validate-framework]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run benchmarks
      run: |
        pytest tests/ -v -m "slow" --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Security Scan
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation
  docs:
    runs-on: ubuntu-latest
    name: Documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -r requirements.txt

    - name: Build documentation
      run: |
        # Create docs if they don't exist
        if [ ! -d "docs_build" ]; then
          mkdir docs_build
          cp -r docs/* docs_build/ 2>/dev/null || true
          echo "# ML Optimization Framework Documentation" > docs_build/index.md
          echo "" >> docs_build/index.md
          echo "## Available Documentation" >> docs_build/index.md
          echo "- [Tutorial](tutorial.md)" >> docs_build/index.md
          echo "- [API Reference](api_reference.md)" >> docs_build/index.md
          echo "- [Dashboard Guide](dashboard_guide.md)" >> docs_build/index.md
          echo "- [Optimization Report](optimization_report.md)" >> docs_build/index.md
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: './docs_build'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Release
  release:
    runs-on: ubuntu-latest
    name: Release
    needs: [code-quality, test, validate-framework, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
      if: env.TWINE_PASSWORD != ''
